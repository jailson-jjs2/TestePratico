package iniflex;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class FuncionarioManager {

    private List<Funcionario> listaFuncionarios;

    public FuncionarioManager() {
        this.listaFuncionarios = new ArrayList<>();
    }

    public void adicionarFuncionario(String nome, LocalDate dataNasc, BigDecimal salario, String funcao) {
        Funcionario funcionario = new Funcionario();
        funcionario.setNome(nome);
        funcionario.setDataNasc(dataNasc);
        funcionario.setSalario(salario);
        funcionario.setFuncao(funcao);
        listaFuncionarios.add(funcionario);
    }

    public void removerFuncionario(String nome) {
        listaFuncionarios.removeIf(funcionario -> funcionario.getNome().equals(nome));
    }

    public void mostrarFuncionarios() {
        System.out.println("Nome          Data de Nascimento   Salário         Função");
        System.out.println("---------------------------------------------------------");
        for (Funcionario funcionario : listaFuncionarios) {
            System.out.printf("%-14s %-20s %-15s %-15s%n",
                    funcionario.getNome(),
                    funcionario.getDataNasc().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
                    formatarSalario(funcionario.getSalario()),
                    funcionario.getFuncao());
        }
        System.out.println();
    }

    private String formatarSalario(BigDecimal salario) {
        NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));
        return formatoMoeda.format(salario);
    }


    public void aumentarSalarioTodos() {
        for (Funcionario funcionario : listaFuncionarios) {
            BigDecimal salarioAtual = funcionario.getSalario();
            BigDecimal aumento = salarioAtual.multiply(new BigDecimal("0.10"));
            BigDecimal novoSalario = salarioAtual.add(aumento);
            funcionario.setSalario(novoSalario);
        }
    }
    
    public Map<String, List<Funcionario>> agruparPorFuncao() {
        Map<String, List<Funcionario>> funcionariosPorFuncao = new HashMap<>();

        for (Funcionario funcionario : listaFuncionarios) {
            String funcao = funcionario.getFuncao();

            if (!funcionariosPorFuncao.containsKey(funcao)) {
                funcionariosPorFuncao.put(funcao, new ArrayList<>());
            }

            funcionariosPorFuncao.get(funcao).add(funcionario);
        }

        return funcionariosPorFuncao;
    }
    
    
    public void mostrarFuncionariosAgrupadosPorFuncao() {
        Map<String, List<Funcionario>> funcionariosPorFuncao = agruparPorFuncao();

        for (Map.Entry<String, List<Funcionario>> entry : funcionariosPorFuncao.entrySet()) {
            String funcao = entry.getKey();
            List<Funcionario> funcionarios = entry.getValue();

            System.out.println("Funcionários da função: " + funcao);
            for (Funcionario funcionario : funcionarios) {
                System.out.println(" - " + funcionario.getNome());
            }
        }
    }

    
    
    
    
    

}
